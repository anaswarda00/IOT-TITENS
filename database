// ====== server.js ======
const express = require("express");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const cors = require("cors");
const rateLimit = require("express-rate-limit");
const compression = require("compression");
const cron = require("node-cron");
const morgan = require("morgan");
const helmet = require("helmet");
const swaggerUi = require("swagger-ui-express");
const swaggerDocument = require("./swagger.json");
const jwt = require("jsonwebtoken");
const Joi = require("joi");
const bcrypt = require("bcryptjs");
const fs = require("fs");
const path = require("path");

const sensorRoutes = require("./routes/sensors");
const imageRoutes = require("./routes/images");
const aiRoutes = require("./routes/ai");
const controlRoutes = require("./routes/control");
const authMiddleware = require("./utils/authMiddleware");
const roleMiddleware = require("./utils/roleMiddleware");
const Logs = require("./models/Logs");
const SensorData = require("./models/SensorData");
const ImageData = require("./models/ImageData");
const User = require("./models/User");
const AIResult = require("./models/AIResult");

dotenv.config();
const app = express();

const limiter = rateLimit({
  windowMs: 1 * 60 * 1000,
  max: 60,
  keyGenerator: (req) => req.headers["esp-id"] || req.ip
});

// ===== Middleware Setup =====
app.use(helmet());
app.use(cors());
app.use(limiter);
app.use(compression());
app.use(express.json({ limit: "20mb" }));
app.use(morgan("combined", {
  stream: fs.createWriteStream(path.join(__dirname, "logs/access.log"), { flags: "a" })
}));

// ===== Database Connection =====
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

mongoose.connection.on("connected", () => {
  console.log("✅ MongoDB connected successfully.");
});

mongoose.connection.on("error", (err) => {
  console.error("❌ MongoDB connection error:", err);
});

// ===== Auth Routes (Enhanced) =====
app.post("/api/auth/signup", async (req, res) => {
  const schema = Joi.object({
    email: Joi.string().required(),
    password: Joi.string().required(),
    role: Joi.string().valid("admin", "user", "viewer").default("user")
  });
  const { error, value } = schema.validate(req.body);
  if (error) return res.status(400).json({ status: "fail", error: error.details[0].message });

  try {
    const existingUser = await User.findOne({ email: value.email });
    if (existingUser) return res.status(409).json({ status: "fail", error: "User already exists" });

    const hashedPassword = await bcrypt.hash(value.password, 10);
    const newUser = new User({ email: value.email, password: hashedPassword, role: value.role });
    await newUser.save();
    await Logs.create({ type: "user", message: "User signed up", esp_id: value.email });
    res.status(201).json({ status: "success", message: "User created" });
  } catch (err) {
    await Logs.create({ type: "error", message: err.message });
    res.status(500).json({ status: "fail", error: err.message });
  }
});

app.post("/api/auth/login", async (req, res) => {
  const schema = Joi.object({
    email: Joi.string().required(),
    password: Joi.string().required()
  });
  const { error, value } = schema.validate(req.body);
  if (error) return res.status(400).json({ status: "fail", error: error.details[0].message });

  try {
    const user = await User.findOne({ email: value.email });
    if (!user) return res.status(401).json({ status: "fail", error: "User not found" });

    const isMatch = await bcrypt.compare(value.password, user.password);
    if (!isMatch) return res.status(401).json({ status: "fail", error: "Invalid password" });

    const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: "7d" });
    await Logs.create({ type: "user", message: "User login", esp_id: value.email });
    res.json({ status: "success", token });
  } catch (err) {
    await Logs.create({ type: "error", message: err.message });
    res.status(500).json({ status: "fail", error: err.message });
  }
});

app.get("/api/auth/me", authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    if (!user) return res.status(404).json({ status: "fail", error: "User not found" });
    res.json({ status: "success", data: user });
  } catch (err) {
    res.status(500).json({ status: "fail", error: err.message });
  }
});

app.get("/api/dashboard/stats", authMiddleware, roleMiddleware(["admin"]), async (req, res) => {
  try {
    const [sensorCount, imageCount, userCount, alertsCount] = await Promise.all([
      SensorData.countDocuments(),
      ImageData.countDocuments(),
      User.countDocuments(),
      Logs.countDocuments({ type: "alert" })
    ]);
    res.json({
      status: "success",
      data: {
        totalSensors: sensorCount,
        totalImages: imageCount,
        totalUsers: userCount,
        totalAlerts: alertsCount
      }
    });
  } catch (err) {
    res.status(500).json({ status: "fail", error: err.message });
  }
});

app.post("/api/ai/result", authMiddleware, async (req, res) => {
  try {
    const { image_id, status, confidence } = req.body;
    const result = new AIResult({ image_id, status, confidence });
    await result.save();
    res.status(201).json({ status: "success", message: "AI result saved" });
  } catch (err) {
    res.status(500).json({ status: "fail", error: err.message });
  }
});

app.get("/api/logs/alerts", authMiddleware, async (req, res) => {
  try {
    const alerts = await Logs.find({ type: "alert" }).sort({ timestamp: -1 }).limit(50);
    res.json({ status: "success", data: alerts });
  } catch (err) {
    res.status(500).json({ status: "fail", error: err.message });
  }
});
